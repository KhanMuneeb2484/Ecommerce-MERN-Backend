<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checkout</title>
    <style>
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
      }

      .container {
        background-color: #ffffff;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 20px;
        max-width: 400px;
        width: 100%;
        margin: 20px;
      }

      h2 {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
      }

      ul {
        list-style-type: none;
        padding: 0;
        margin: 0 0 20px 0;
      }

      ul li {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
      }

      ul li:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
      }

      .cart-item-info {
        display: flex;
        flex-direction: column;
      }

      .cart-item-info span {
        font-size: 0.9em;
        color: #555;
      }

      .cart-item-name {
        font-weight: bold;
        color: #333;
      }

      .cart-item-quantity {
        font-size: 0.85em;
        color: #888;
      }

      #total-price {
        text-align: right;
        font-size: 1.2em;
        margin-bottom: 20px;
        color: #333;
      }

      form {
        display: flex;
        flex-direction: column;
      }

      #card-element {
        background-color: #f7f7f7;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 20px;
        border: 1px solid #ddd;
      }

      button {
        background-color: #4caf50;
        color: #fff;
        padding: 10px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      button:hover {
        background-color: #45a049;
      }

      button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
      }

      #error-message {
        color: red;
        margin-top: 10px;
        text-align: center;
      }

      /* Add some responsive design */
      @media (max-width: 500px) {
        .container {
          padding: 15px;
          width: 90%;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h2>Your Cart</h2>
      <ul id="cart-items">
        <!-- Cart items will be inserted here -->
      </ul>
      <h3 id="total-price">Total: $0.00</h3>

      <h2>Complete Your Payment</h2>
      <form id="payment-form">
        <div id="card-element">
          <!-- Stripe's card element will be inserted here -->
        </div>
        <button id="submit">Pay</button>
        <div id="error-message"></div>
      </form>
    </div>

    <script src="https://js.stripe.com/v3/"></script>
    <script>
      document.addEventListener("DOMContentLoaded", async function () {
        // Fetch and display the cart items
        const response = await fetch("/cart/get-cart-by-id", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        const cart = await response.json();
        console.log("ðŸš€ ~ cart:", response);
        displayCartItems(cart);

        // Initialize Stripe
        const stripe = Stripe("<%= stripePublishableKey %>");
        const elements = stripe.elements();
        const cardElement = elements.create("card");
        cardElement.mount("#card-element");

        // Handle payment form submission
        const form = document.getElementById("payment-form");
        form.addEventListener("submit", async (event) => {
          event.preventDefault();

          // Disable the submit button to prevent multiple submissions
          document.getElementById("submit").disabled = true;

          // Create a Payment Intent and get the client secret
          const paymentIntentResponse = await fetch(
            "/checkout/create-checkout",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
              body: JSON.stringify({
                paymentMethod: "Credit Card", // or another method
              }),
            }
          );

          const { clientSecret } = await paymentIntentResponse.json();

          const { paymentIntent, error } = await stripe.confirmCardPayment(
            clientSecret,
            {
              payment_method: {
                card: cardElement,
              },
            }
          );

          if (error) {
            document.getElementById("error-message").textContent =
              error.message;
            // Re-enable the submit button
            document.getElementById("submit").disabled = false;
          } else if (paymentIntent.status === "succeeded") {
            document.getElementById("error-message").textContent =
              "Payment succeeded!";
            // Redirect to a success page or perform additional actions
          }
        });
      });

      function displayCartItems(cart) {
        const cartItemsContainer = document.getElementById("cart-items");
        cart.items.forEach((item) => {
          const listItem = document.createElement("li");

          const itemInfo = document.createElement("div");
          itemInfo.classList.add("cart-item-info");

          const itemName = document.createElement("div");
          itemName.classList.add("cart-item-name");
          itemName.innerText = item.productId.name;

          const itemQuantity = document.createElement("span");
          itemQuantity.classList.add("cart-item-quantity");
          itemQuantity.innerText = `Quantity: ${item.quantity}`;

          itemInfo.appendChild(itemName);
          itemInfo.appendChild(itemQuantity);

          const itemPrice = document.createElement("div");
          itemPrice.classList.add("cart-item-price");
          itemPrice.innerText = `$${item.price.toFixed(2)}`;

          listItem.appendChild(itemInfo);
          listItem.appendChild(itemPrice);

          cartItemsContainer.appendChild(listItem);
        });
        document.getElementById(
          "total-price"
        ).innerText = `Total: $${cart.totalCartPrice.toFixed(2)}`;
      }
    </script>
  </body>
</html>
